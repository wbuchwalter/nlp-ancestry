{"version":3,"sources":["components/ModelCard.js","components/NodeElement.js","App.js","index.js"],"names":["ModelCard","state","foreignObjectProps","width","height","x","y","modelInfo","ModelsInfo","this","props","modelName","className","hfLink","Tooltip","title","IconButton","onClick","_","window","open","src","process","paperLink","resultsLink","alt","Divider","contribs","map","e","key","uses","Component","textLayout","vertical","textAnchor","attributes","attribute","dy","horizontal","NodeElement","showModelCard","nodeClick","nodeDatum","name","orientation","onNodeClick","r","showPopUp","App","handleNodeClick","addedNodesCount","nodeFn","rd3tProps","appState","toggleNode","selectedModelName","data","nlpAncestryJson","translateX","translateY","collapsible","shouldCollapseNeighborNodes","initialDepth","depthFactor","undefined","zoomable","zoom","scaleExtent","min","max","separation","siblings","nonSiblings","nodeSize","enableLegacyTransitions","transitionDuration","renderCustomNodeElement","setTreeData","bind","setState","dimensions","treeContainer","getBoundingClientRect","ref","tc","rootNodeClassName","leafNodeClassName","branchNodeClassName","translate","pathFunc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fafd9834.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport AssessmentOutlinedIcon from '@material-ui/icons/AssessmentOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport './ModelCard.css';\r\nimport ModelsInfo from '../data/models-info.json';\r\n\r\nclass ModelCard extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            foreignObjectProps: {\r\n                width: 400,\r\n                height: 1000,\r\n                x: -420,\r\n                y: -200,\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const modelInfo = ModelsInfo[this.props.modelName]\r\n        return (\r\n            <div className=\"ModelCard\">\r\n                <div className=\"CardHeader\">\r\n                    <h2 className=\"ModelName\">{this.props.modelName}</h2>\r\n\r\n                    {modelInfo.hfLink && (\r\n                         <Tooltip title=\"View on HuggingFace\">\r\n                            <IconButton className=\"HeaderButton\"\r\n                                onClick={_ => window.open(modelInfo.hfLink, \"_blank\")}>\r\n                                <img className='HfIcon' src={process.env.PUBLIC_URL + '/huggingface_logo.svg'} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n\r\n                    {modelInfo.paperLink && (\r\n                        <Tooltip title=\"Open model's paper\">\r\n                            <IconButton className=\"HeaderButton\"\r\n                                onClick={_ => window.open(modelInfo.paperLink, \"_blank\")}>\r\n                                <DescriptionOutlinedIcon className='ButtonIcon' />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n\r\n                    {modelInfo.resultsLink && (\r\n                         <Tooltip title=\"Open model's results\">\r\n                            <IconButton className=\"HeaderButton\"\r\n                                onClick={_ => window.open(modelInfo.resultsLink, \"_blank\")}>\r\n                                <AssessmentOutlinedIcon className='ButtonIcon' alt='???'/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    )}\r\n\r\n                </div>\r\n                <Divider />\r\n\r\n                {modelInfo.contribs && (\r\n                    <div>\r\n                        <h3>Main Contributions</h3>\r\n                        <ul>{modelInfo.contribs.map(e => <li key={e}>{e}</li>)}</ul>\r\n                    </div>\r\n                )}\r\n\r\n                {modelInfo.uses && (\r\n                    <div>\r\n                        <h3>Primary Uses</h3>\r\n                        <ul>{modelInfo.uses.map(e => <li key={e}>{e}</li>)}</ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelCard;","import React, { Component } from 'react';\r\nimport ModelCard from './ModelCard';\r\nimport './NodeElement.css';\r\n\r\nconst textLayout = {\r\n  vertical: {\r\n    title: {\r\n      textAnchor: 'start',\r\n      x: 40,\r\n    },\r\n    attributes: {},\r\n    attribute: {\r\n      x: 40,\r\n      dy: '1.2em',\r\n    },\r\n  },\r\n  horizontal: {\r\n    title: {\r\n      textAnchor: 'start',\r\n      y: 40,\r\n    },\r\n    attributes: {\r\n      x: 0,\r\n      y: 40,\r\n    },\r\n    attribute: {\r\n      x: 0,\r\n      dy: '1.2em',\r\n    },\r\n  },\r\n};\r\n\r\n\r\nclass NodeElement extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      showModelCard: false\r\n    };\r\n  }\r\n\r\n  showPopUp() {\r\n    // this.setState({showModelCard: !this.state.showModelCard});\r\n    this.props.nodeClick(this.props.nodeDatum.name);\r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        <g>\r\n          <text\r\n            className=\"rd3t-label__title\"\r\n            {...textLayout[this.props.orientation].title}\r\n            onClick={this.props.onNodeClick}\r\n          >\r\n            {this.props.nodeDatum.name}\r\n          </text>\r\n          {/* <text className=\"rd3t-label__attributes\" {...textLayout[this.props.orientation].attributes}>\r\n            {this.props.nodeDatum.attributes &&\r\n              Object.entries(this.props.nodeDatum.attributes).map(([labelKey, labelValue], i) => (\r\n                <tspan key={`${labelKey}-${i}`} {...textLayout[this.props.orientation].attribute}>\r\n                  {labelKey}: {labelValue}\r\n                </tspan>\r\n              ))}\r\n          </text> */}\r\n        </g>\r\n        {this.state.showModelCard && (<ModelCard modelInfo={this.props.nodeDatum} />)}\r\n        <circle className=\"circle\" r={20} onClick={_ => this.showPopUp()}></circle>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NodeElement;\r\n","import React, { Component } from 'react';\r\nimport Tree from 'react-d3-tree';\r\nimport NodeElement from './components/NodeElement';\r\nimport './App.css';\r\n\r\nimport nlpAncestryJson from './data/nlp-ancestry.json';\r\nimport ModelCard from './components/ModelCard';\r\nimport ModelsInfo from './data/models-info.json';\r\n\r\n// const customNodeFnMapping = {\r\n//   svg: {\r\n//     fn: (rd3tProps, appState) => {\r\n//       return (\r\n//       <NodeElement\r\n//         nodeDatum={rd3tProps.nodeDatum}\r\n//         toggleNode={rd3tProps.toggleNode}\r\n//         orientation={appState.orientation}\r\n//         nodeClick={showModelCard}\r\n//       />\r\n//     )},\r\n//   },\r\n// };\r\n\r\n\r\n// const countNodes = (count = 0, n) => {\r\n//   // Count the current node\r\n//   count += 1;\r\n\r\n//   // Base case: reached a leaf node.\r\n//   if (!n.children) {\r\n//     return count;\r\n//   }\r\n\r\n//   // Keep traversing children while updating `count` until we reach the base case.\r\n//   return n.children.reduce((sum, child) => countNodes(sum, child), count);\r\n// };\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.addedNodesCount = 0;\r\n\r\n    this.nodeFn = (rd3tProps, appState) => {\r\n      return (\r\n      <NodeElement\r\n        nodeDatum={rd3tProps.nodeDatum}\r\n        toggleNode={rd3tProps.toggleNode}\r\n        orientation={appState.orientation}\r\n        nodeClick={this.showModelCard}\r\n      />\r\n    )};\r\n\r\n    this.state = {\r\n      showModelCard: false,\r\n      selectedModelName: null,\r\n      data: nlpAncestryJson,\r\n      // totalNodeCount: countNodes(0, Array.isArray(nlpAncestryJson) ? nlpAncestryJson[0] : nlpAncestryJson),\r\n      orientation: 'vertical',\r\n      translateX: 200,\r\n      translateY: 300,\r\n      collapsible: true,\r\n      shouldCollapseNeighborNodes: false,\r\n      initialDepth: 999,\r\n      depthFactor: undefined,\r\n      zoomable: true,\r\n      zoom: 1,\r\n      scaleExtent: { min: 0.1, max: 1 },\r\n      separation: { siblings: 1, nonSiblings: 1 },\r\n      nodeSize: { x: 200, y: 200 },\r\n      enableLegacyTransitions: false,\r\n      transitionDuration: 500,\r\n      renderCustomNodeElement: this.nodeFn,\r\n    };\r\n\r\n\r\n    this.setTreeData = this.setTreeData.bind(this);\r\n    this.showModelCard = this.showModelCard.bind(this);\r\n\r\n  }\r\n\r\n  setTreeData(data) {\r\n    this.setState({\r\n      data,\r\n      // totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),\r\n    });\r\n  }\r\n\r\n  showModelCard(modelName){\r\n    this.setState({...this.state, showModelCard: !this.state.showModelCard, selectedModelName: modelName})\r\n  }\r\n\r\n  componentDidMount() {\r\n    const dimensions = this.treeContainer.getBoundingClientRect();\r\n    this.setState({\r\n      translateX: dimensions.width / 1.75,\r\n      translateY: 200,\r\n    });\r\n  }\r\n\r\n  handleNodeClick = () => {\r\n  };\r\n\r\n  render() {\r\n    const model = ModelsInfo['GPT-2']\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"demo-container\">\r\n          <div className=\"column-right\">\r\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\r\n              <Tree\r\n                data={this.state.data}\r\n                renderCustomNodeElement={\r\n                  this.state.renderCustomNodeElement\r\n                    ? rd3tProps => this.state.renderCustomNodeElement(rd3tProps, this.state)\r\n                    : undefined\r\n                }\r\n                rootNodeClassName=\"node\"\r\n                leafNodeClassName=\"node\"\r\n                branchNodeClassName=\"node\"\r\n                orientation={this.state.orientation}\r\n                translate={{ x: this.state.translateX, y: this.state.translateY }}\r\n                pathFunc={this.state.pathFunc}\r\n                collapsible={this.state.collapsible}\r\n                initialDepth={this.state.initialDepth}\r\n                zoomable={this.state.zoomable}\r\n                zoom={this.state.zoom}\r\n                scaleExtent={this.state.scaleExtent}\r\n                nodeSize={this.state.nodeSize}\r\n                separation={this.state.separation}\r\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\r\n                transitionDuration={this.state.transitionDuration}\r\n                depthFactor={this.state.depthFactor}\r\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\r\n              />\r\n            </div>\r\n            {this.state.showModelCard && (\r\n              <div className='modal'>\r\n                  <ModelCard  modelName={this.state.selectedModelName}/>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}